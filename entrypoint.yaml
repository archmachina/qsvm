---
version: "1"

env:
  GITHUB_OWNER: archmachina
  GITHUB_REPO: qsvm

steps:
  #
  # Versioning steps
  #

  # Generate a rolling version to use for versioning
  semver_rolling_version:
    type: command
    interpreter: /bin/bash
    command: echo "0.1.0-rolling+$(git log -1 --format=%h)"
    capture: SEMVER_SOURCE
    capture_strip: true

  parse_semver:
    type: semver
    required: true
    sources:
      - SEMVER_SOURCE

  #
  # Repo mgmt steps
  #

  clean_dist:
    type: command
    command: rm -rf dist/

  clean_env:
    type: command
    command: rm -rf env/

  #
  # Python mgmt steps
  #

  python_setup_env:
    type: bash
    command: >
      python3 -m venv env &&
      source ./env/bin/activate &&
      python3 -m pip install --upgrade pip &&
      python3 -m pip install --upgrade setuptools build twine

  python_build:
    type: bash
    depends_on:
      - clean_dist
      - python_setup_env
      - parse_semver
    command: source ./env/bin/activate && python3 -m build
    env:
      BUILD_VERSION: "${SEMVER_MAJOR}.${SEMVER_MINOR}.${SEMVER_PATCH}"

  pypi_release:
    type: bash
    depends_on:
      - python_build
    command: source ./env/bin/activate && python3 -m twine upload dist/*
    env:
      TWINE_USERNAME: "__token__"
      TWINE_PASSWORD: $SECRET_PYPI_TOKEN

actions:
  clean:
    steps:
      - clean_dist
      - clean_env

  build:
    steps:
      # Generate a rolling version for this build
      - semver_rolling_version
      - parse_semver
      - python_build

  # Steps for a pull request to the main branch
  pr_branch_main:
    steps:
      # Generate a rolling version for this build
      - semver_rolling_version
      - parse_semver
      - python_build

  # Steps to perform when building on main branch
  push_branch_main:
    env:
      # Update the latest tag when pushing to the registry
      TAG_VERSIONS: "latest"
    steps:
      # Generate a rolling version for this build
      - semver_rolling_version
      - parse_semver
      - python_build

  # Steps to perform when building from a git tag v*
  push_tag_v:
    env:
      # Take the semver version from GITHUB_REF by default
      SEMVER_SOURCE: $GITHUB_REF
    steps:
      - parse_semver
      # Expand tags will include additional version tags in the TAG_VERSIONS var based on the semver version
      - pypi_release
      - name: github_release
        type: github_release
        owner: $GITHUB_OWNER
        repo: $GITHUB_REPO
        token: $GITHUB_TOKEN
        payload: |
          {
            "tag_name": "$SEMVER_ORIG",
            "name": "Version $SEMVER_FULL",
            "draft": false,
            "prerelease": $SEMVER_IS_PRERELEASE_WORD,
            "generate_release_notes": true
          }
        env:
          GITHUB_TOKEN: $SECRET_GITHUB_TOKEN

